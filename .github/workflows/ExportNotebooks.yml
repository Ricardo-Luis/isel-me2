name: Export Pluto notebooks & Deploy
permissions:
    contents: write
on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main
    workflow_dispatch:
concurrency:
    group: export
    cancel-in-progress: true

jobs:
    build-and-deploy:
        runs-on: ubuntu-latest
        steps:
            # --- Fase 1: Setup ---
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                fetch-depth: 0

            - name: Install Julia
              uses: julia-actions/setup-julia@v2
              with:
                version: '1.11'
                arch: x64

            # --- Fase 2: Configuração Específica ---
            - name: Setup Pluto environment
              run: |
                  mkdir -p pluto-deployment-environment
                  julia -e '
                  using Pkg
                  Pkg.activate("pluto-deployment-environment")
                  Pkg.add([
                      "Pluto",
                      "PlutoPages@0.1.13",
                      "PlutoUI",
                      "HTTP"
                  ])
                  Pkg.instantiate()
                  Pkg.precompile()
                  '

            # --- Fase 3: Validação de Notebooks Corrigida ---
            - name: Validate notebooks
              run: |
                  # Lista notebooks usando find (método compatível)
                  NOTEBOOKS=$(find content/week0 content/data_science -name "*.jl")
                  if [ -z "$NOTEBOOKS" ]; then
                      echo "::error::No notebooks found"
                      exit 1
                  fi
                  
                  julia --project=pluto-deployment-environment -e '
                  using Pluto
                  using Pkg
                  
                  notebooks = split("""$NOTEBOOKS""", "\n")
                  println("Validating ", length(notebooks), " notebooks")
                  
                  for nb in notebooks
                      if !isempty(nb)
                          println("\n🔍 Validating: ", nb)
                          try
                              # Método correto para ativar ambiente do notebook
                              Pkg.activate(dirname(nb))
                              nb_obj = Pluto.load_notebook(nb)
                              Pluto.update_run!(nb_obj)
                              println("✅ Valid")
                          catch e
                              println("❌ Error in ", nb)
                              showerror(stdout, e)
                              println("\nStacktrace:")
                              Base.show_backtrace(stdout, catch_backtrace())
                              exit(1)
                          end
                      end
                  end
                  '

            # --- Fase 4: Geração do Site ---
            - name: Generate static site
              run: |
                  ln -sfn content src
                  
                  julia --project=pluto-deployment-environment -e '
                  using PlutoPages
                  
                  try
                      println("Starting generation...")
                      PlutoPages.generate("."; 
                          html_report_path="generation_log.html",
                          notebook_dirs=["week0", "data_science"],
                          fail_on_error=true,
                          pluto_server_url="http://localhost:1234"
                      )
                      
                      if !isdir("_site") || isempty(readdir("_site"))
                          error("No content generated in _site directory")
                      end
                      println("✅ Generation completed successfully")
                  catch e
                      println("❌ Generation failed")
                      showerror(stdout, e)
                      exit(1)
                  end
                  '

            # --- Fase 5: Deploy ---
            - name: Prepare and deploy
              run: |
                  mkdir -p www/Fall23
                  
                  if [ -d "_site" ] && [ "$(ls -A _site)" ]; then
                      mv _site/* www/Fall23/
                      echo "✅ Content ready for deployment"
                  else
                      echo "::error::No content generated"
                      exit 1
                  fi
                  
                  # Página de redirecionamento
                  cat > www/index.html << 'EOF'
                  <!DOCTYPE html>
                  <html>
                  <head>
                      <meta charset="UTF-8">
                      <meta http-equiv="refresh" content="0; url=./Fall23/">
                  </head>
                  <body>
                      <p>Redirecting to <a href="./Fall23/">course content</a>...</p>
                  </body>
                  </html>
                  EOF

            - name: Deploy to GitHub Pages
              if: github.event_name == 'push' && github.ref == 'refs/heads/main'
              uses: actions/deploy-pages@v4

            # --- Fase 6: Relatório de Falhas ---
            - name: Generate debug report
              if: failure()
              run: |
                  echo "# 🐛 Debug Report" > debug.md
                  echo "## Environment" >> debug.md
                  echo '```' >> debug.md
                  julia -e 'using InteractiveUtils; versioninfo()' >> debug.md
                  echo -e "\nActive packages:" >> debug.md
                  julia --project=pluto-deployment-environment -e 'using Pkg; Pkg.status()' >> debug.md
                  echo '```' >> debug.md
                  
                  if [ -f "generation_log.html" ]; then
                      echo "## Generation Log" >> debug.md
                      echo '```html' >> debug.md
                      grep -A 50 -B 10 "ERROR" generation_log.html | head -100 >> debug.md || echo "No errors found in log" >> debug.md
                      echo '```' >> debug.md
                  fi
                  
                  echo "REPORT_FILE=debug.md" >> $GITHUB_ENV

            - name: Upload debug report
              if: failure()
              uses: actions/upload-artifact@v4
              with:
                name: debug-report
                path: ${{ env.REPORT_FILE }}
                retention-days: 7
