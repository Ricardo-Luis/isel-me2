name: Export Pluto notebooks & Deploy
permissions:
    contents: write
on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main
    workflow_dispatch:
concurrency:
    group: export
    cancel-in-progress: true

jobs:
    build-and-deploy:
        runs-on: ubuntu-latest
        steps:
            # --- Fase 1: Setup ---
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                fetch-depth: 0

            - name: Install Julia
              uses: julia-actions/setup-julia@v2
              with:
                version: '1.11'
                arch: x64

            # --- Fase 2: Configura√ß√£o ---
            - name: Setup environment
              run: |
                  mkdir -p pluto-deployment-environment
                  julia -e '
                  using Pkg
                  Pkg.activate("pluto-deployment-environment")
                  Pkg.add([
                      "Pluto",
                      "PlutoPages",
                      "PlutoUI",
                      "HTTP"
                  ])
                  Pkg.instantiate()
                  Pkg.precompile()
                  '

            # --- Fase 3: Busca de Notebooks (M√©todo Compat√≠vel) ---
            - name: Find notebooks
              id: find-notebooks
              run: |
                  # M√©todo compat√≠vel para buscar notebooks
                  echo "Notebooks encontrados:"
                  find content/week0 content/data_science -name "*.jl" | tee notebooks.list
                  echo "NOTEBOOKS=$(find content/week0 content/data_science -name "*.jl" | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT

            # --- Fase 4: Valida√ß√£o ---
            - name: Validate notebooks
              run: |
                  julia --project=pluto-deployment-environment -e '
                  using Pluto
                  
                  notebooks = ARGS
                  if isempty(notebooks)
                      error("Nenhum notebook encontrado")
                  end
                  
                  for nb in notebooks
                      println("üîç Validando: ", nb)
                      try
                          Pluto.activate(dirname(nb))
                          Pluto.load_notebook(nb) |> Pluto.update_run!
                          println("‚úÖ V√°lido")
                      catch e
                          println("‚ùå Erro: ")
                          showerror(stdout, e)
                          println("\nStacktrace:")
                          Base.show_backtrace(stdout, catch_backtrace())
                          exit(1)
                      end
                  end
                  ' ${{ steps.find-notebooks.outputs.NOTEBOOKS }}

            # --- Fase 5: Gera√ß√£o ---
            - name: Generate site
              run: |
                  ln -sfn content src
                  
                  julia --project=pluto-deployment-environment -e '
                  using PlutoPages
                  
                  try
                      println("‚öôÔ∏è Iniciando gera√ß√£o...")
                      PlutoPages.generate(".";
                          html_report_path="generation_log.html",
                          notebook_dirs=["week0", "data_science"],
                          fail_on_error=true
                      )
                      
                      if !isdir("_site") || isempty(readdir("_site"))
                          error("Diret√≥rio _site vazio ou n√£o criado")
                      end
                      println("‚úÖ Gera√ß√£o conclu√≠da")
                  catch e
                      println("‚ùå Falha na gera√ß√£o:")
                      showerror(stdout, e)
                      exit(1)
                  end
                  '

            # --- Fase 6: Deploy ---
            - name: Prepare and deploy
              run: |
                  mkdir -p www/Fall23
                  
                  if [ -d "_site" ] && [ "$(ls -A _site)" ]; then
                      mv _site/* www/Fall23/
                      echo "üöÄ Conte√∫do pronto para deploy"
                  else
                      echo "‚ö†Ô∏è Nenhum conte√∫do gerado"
                      exit 1
                  fi
                  
                  # P√°gina de redirecionamento
                  cat > www/index.html << 'EOF'
                  <!DOCTYPE html>
                  <html>
                  <head>
                      <meta charset="UTF-8">
                      <meta http-equiv="refresh" content="0; url=./Fall23/">
                  </head>
                  <body>
                      <p>Redirecionando para <a href="./Fall23/">conte√∫do do curso</a>...</p>
                  </body>
                  </html>
                  EOF

            - name: Deploy to GitHub Pages
              if: github.event_name == 'push' && github.ref == 'refs/heads/main'
              uses: actions/deploy-pages@v4

            # --- Fase 7: Relat√≥rio ---
            - name: Generate report
              if: always()
              run: |
                  echo "# Relat√≥rio de Execu√ß√£o" > report.md
                  echo "## Notebooks processados" >> report.md
                  echo '```' >> report.md
                  cat notebooks.list 2>/dev/null || echo "Nenhum notebook processado" >> report.md
                  echo '```' >> report.md
                  
                  if [ -f "generation_log.html" ]; then
                      echo "## Log de Gera√ß√£o" >> report.md
                      echo '```html' >> report.md
                      head -n 50 generation_log.html >> report.md
                      echo '```' >> report.md
                  fi
                  
                  echo "## Ambiente" >> report.md
                  echo '```' >> report.md
                  julia --project=pluto-deployment-environment -e '
                  using Pkg
                  println("Julia ", VERSION)
                  println("Pluto ", Pkg.dependencies()[findfirst(x->x.name=="Pluto", Pkg.dependencies())].version)
                  println("PlutoPages ", Pkg.dependencies()[findfirst(x->x.name=="PlutoPages", Pkg.dependencies())].version)
                  ' >> report.md
                  echo '```' >> report.md
                  
                  echo "REPORT_FILE=report.md" >> $GITHUB_ENV

            - name: Upload report
              uses: actions/upload-artifact@v4
              with:
                name: execution-report
                path: ${{ env.REPORT_FILE }}
                retention-days: 7
