name: Export Pluto notebooks & Deploy
permissions:
    contents: write
on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main
    workflow_dispatch:
concurrency:
    group: export
    cancel-in-progress: true

jobs:
    build-and-deploy:
        runs-on: ubuntu-latest
        steps:
            # --- Fase 1: Setup Inicial ---
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                fetch-depth: 0

            - name: Install Julia
              uses: julia-actions/setup-julia@v2
              with:
                version: '1.11'
                arch: x64

            # --- Fase 2: Configura√ß√£o Robusta ---
            - name: Setup environment with debug tools
              run: |
                  mkdir -p pluto-deployment-environment
                  julia -e '
                  using Pkg
                  Pkg.activate("pluto-deployment-environment")
                  
                  # Pacotes essenciais com vers√µes fixas
                  Pkg.add([
                      Pkg.PackageSpec(name="Pluto", version="0.20.13"),
                      Pkg.PackageSpec(name="PlutoPages", version="0.1.12"),
                      Pkg.PackageSpec(name="PlutoUI", version="0.7.68")
                  ])
                  
                  # Ferramentas de diagn√≥stico
                  Pkg.add(["HTTP", "LoggingExtras"])
                  
                  Pkg.instantiate()
                  Pkg.precompile()
                  '

            # --- Fase 3: Verifica√ß√£o Profunda ---
            - name: Deep notebook validation
              run: |
                  julia --project=pluto-deployment-environment -e '
                  using Pluto, LoggingExtras
                  
                  logger = SimpleLogger(open("notebook_validation.log", "w"))
                  
                  function validate_notebook(path)
                      @info "Validating $path"
                      try
                          Pluto.activate(dirname(path))
                          nb = Pluto.load_notebook(path)
                          
                          # Verifica√ß√£o adicional
                          if isempty(nb.cells)
                              @error "Notebook has no cells" notebook=path
                              return false
                          end
                          
                          Pluto.update_run!(nb)
                          return true
                      catch e
                          @error "Validation failed" exception=(e, catch_backtrace()) notebook=path
                          return false
                      end
                  end
                  
                  # Processa apenas as pastas especificadas
                  notebooks = vcat(
                      filter(endswith(".jl"), readdir("content/week0"; join=true, recursive=true)),
                      filter(endswith(".jl"), readdir("content/data_science"; join=true, recursive=true))
                  )
                  
                  if isempty(notebooks)
                      @error "No notebooks found in specified folders"
                      exit(1)
                  end
                  
                  global_logger(logger) do
                      results = validate_notebook.(notebooks)
                      if !all(results)
                          @error "Some notebooks failed validation" failed=notebooks[.!results]
                          exit(1)
                      end
                  end
                  '

            # --- Fase 4: Gera√ß√£o com Log Detalhado ---
            - name: Generate with verbose logging
              run: |
                  mkdir -p _site
                  ln -sfn content src
                  
                  julia --project=pluto-deployment-environment -e '
                  using PlutoPages, LoggingExtras
                  
                  logger = SimpleLogger(open("generation.log", "w"))
                  
                  global_logger(logger) do
                      try
                          @info "Starting generation process"
                          
                          # Configura√ß√£o expl√≠cita
                          PlutoPages.generate(".";
                              html_report_path="generation_report.html",
                              notebook_dirs=["week0", "data_science"],
                              fail_on_error=true,
                              log_level=Logging.Debug
                          )
                          
                          if !isdir("_site") || isempty(readdir("_site"))
                              @error "No content generated in _site directory"
                              exit(1)
                          end
                          
                          @info "Generation completed successfully" file_count=length(readdir("_site"))
                      catch e
                          @error "Generation failed" exception=(e, catch_backtrace())
                          exit(1)
                      end
                  end
                  '

            # --- Fase 5: Deploy ---
            - name: Prepare and deploy
              run: |
                  mkdir -p www/Fall23
                  
                  if [ -d "_site" ] && [ "$(ls -A _site)" ]; then
                      mv _site/* www/Fall23/
                      echo "‚úÖ Content deployed"
                  else
                      echo "‚ö†Ô∏è No content generated, creating placeholder"
                      echo "<h1>Content under maintenance</h1>" > www/Fall23/index.html
                      exit 1
                  fi
                  
                  # Redirect
                  cat > www/index.html << 'EOF'
                  <!DOCTYPE html>
                  <html>
                  <head>
                      <meta charset="UTF-8">
                      <meta http-equiv="refresh" content="0; url=./Fall23/">
                  </head>
                  <body>
                      <p>Redirecting to <a href="./Fall23/">course content</a>...</p>
                  </body>
                  </html>
                  EOF

            - name: Deploy to GitHub Pages
              if: github.event_name == 'push' && github.ref == 'refs/heads/main'
              uses: actions/deploy-pages@v4

            # --- Fase 6: Diagn√≥stico Completo ---
            - name: Generate full debug package
              if: always()
              run: |
                  echo "# üõ† Full Debug Package" > debug.md
                  
                  # 1. System info
                  echo "## System Information" >> debug.md
                  echo '```' >> debug.md
                  julia -e 'using InteractiveUtils; versioninfo()' >> debug.md
                  echo '```' >> debug.md
                  
                  # 2. Notebook validation
                  echo "## Notebook Validation" >> debug.md
                  echo '```' >> debug.md
                  cat notebook_validation.log 2>/dev/null || echo "No validation log" >> debug.md
                  echo '```' >> debug.md
                  
                  # 3. Generation log
                  echo "## Generation Process" >> debug.md
                  echo '```' >> debug.md
                  cat generation.log 2>/dev/null || echo "No generation log" >> debug.md
                  echo '```' >> debug.md
                  
                  # 4. Generated files
                  echo "## Generated Content" >> debug.md
                  echo '```' >> debug.md
                  find _site -type f 2>/dev/null | head -50 >> debug.md || echo "No generated files" >> debug.md
                  echo '```' >> debug.md
                  
                  # Create debug bundle
                  tar czvf debug_bundle.tar.gz \
                      notebook_validation.log \
                      generation.log \
                      generation_report.html \
                      debug.md \
                      pluto-deployment-environment/Project.toml \
                      pluto-deployment-environment/Manifest.toml 2>/dev/null || true
                  
                  echo "DEBUG_BUNDLE=debug_bundle.tar.gz" >> $GITHUB_ENV
                  echo "DEBUG_REPORT=debug.md" >> $GITHUB_ENV

            - name: Upload debug bundle
              uses: actions/upload-artifact@v4
              with:
                name: debug-bundle
                path: ${{ env.DEBUG_BUNDLE }}
                retention-days: 7

            - name: Show debug summary
              run: |
                  echo "## Full Debug Information" >> $GITHUB_STEP_SUMMARY
                  cat ${{ env.DEBUG_REPORT }} >> $GITHUB_STEP_SUMMARY
