name: Export Pluto notebooks & Deploy
permissions:
    contents: write
on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main
    workflow_dispatch:
concurrency:
    group: export
    cancel-in-progress: true

jobs:
    build-and-deploy:
        runs-on: ubuntu-latest
        steps:
            # --- Fase 1: Setup ---
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                fetch-depth: 0

            - name: Install Julia
              uses: julia-actions/setup-julia@v2
              with:
                version: '1.11'

            # --- Fase 2: Configuração do Ambiente ---
            - name: Setup Pluto environment
              run: |
                  # Cria ambiente se não existir
                  if [ ! -d "pluto-deployment-environment" ]; then
                      mkdir pluto-deployment-environment
                      julia -e 'using Pkg; Pkg.activate("pluto-deployment-environment"); Pkg.add("PlutoPages")'
                  fi
                  
                  julia --project=pluto-deployment-environment -e '
                    using Pkg
                    Pkg.instantiate()
                    Pkg.precompile()
                  '

            # --- Fase 3: Geração do Site ---
            - name: Generate notebooks
              id: generate
              run: |
                  # Cria link simbólico obrigatório
                  ln -sfn content src
                  
                  # Verifica se existem notebooks
                  if [ -z "$(find content -name '*.jl' -print -quit)" ]; then
                      echo "::error::No notebooks found in content/"
                      exit 1
                  fi
                  
                  julia --project=pluto-deployment-environment -e '
                    using Pkg; Pkg.instantiate()
                    using PlutoPages
                    
                    try
                        println("Starting generation with PlutoPages v", pkgversion(PlutoPages))
                        
                        # Configuração robusta
                        PlutoPages.generate("."; 
                            html_report_path="generation_report.html",
                            verbose=true,
                            create_notebook_shortcuts=true,
                            fail_on_error=true
                        )
                        
                        # Verificação pós-geração
                        if !isdir("_site")
                            error("❌ _site directory was not created!")
                        else
                            println("✅ Generated ", length(readdir("_site")), " files in _site")
                        end
                        
                    catch e
                        println("::error::Generation failed")
                        showerror(stdout, e)
                        println("\nStacktrace:")
                        Base.show_backtrace(stdout, catch_backtrace())
                        exit(1)
                    end
                  '

            # --- Fase 4: Deploy ---
            - name: Prepare deployment
              run: |
                  mkdir -p www
                  
                  if [ -d "_site" ]; then
                      # Move conteúdo gerado
                      mv _site www/Fall23
                      
                      # Adiciona redirect
                      cat > www/index.html << 'EOF'
                      <!DOCTYPE html>
                      <html>
                      <head>
                          <meta charset="UTF-8">
                          <meta http-equiv="refresh" content="0; url=./Fall23/">
                      </head>
                      <body>
                          <p>Redirecting to <a href="./Fall23/">course content</a>...</p>
                      </body>
                      </html>
                      EOF
                      
                      echo "✅ Site prepared for deployment"
                  else
                      echo "::error::No _site directory found after generation"
                      exit 1
                  fi

            - name: Deploy to GitHub Pages
              if: github.event_name == 'push' && github.ref == 'refs/heads/main'
              uses: actions/deploy-pages@v4

            # --- Fase 5: Relatório (só em falhas) ---
            - name: Generate failure report
              if: failure()
              run: |
                  echo "# 🛠 Failure Analysis" > report.md
                  
                  # 1. Ambiente
                  echo -e "\n## Environment" >> report.md
                  echo '```' >> report.md
                  julia -e 'using InteractiveUtils; versioninfo()' >> report.md
                  echo -e "\nActive project:" >> report.md
                  julia --project=pluto-deployment-environment -e 'using Pkg; println(Pkg.project().path)' >> report.md
                  echo '```' >> report.md
                  
                  # 2. Conteúdo gerado
                  echo -e "\n## Generated Content" >> report.md
                  if [ -f "generation_report.html" ]; then
                      echo -e "\n### Generation Log" >> report.md
                      echo '```html' >> report.md
                      grep -A 50 -B 10 "ERROR" generation_report.html | head -100 >> report.md || echo "No errors found in log" >> report.md
                      echo '```' >> report.md
                  fi
                  
                  # 3. Notebooks problemáticos
                  echo -e "\n### Notebook Status" >> report.md
                  echo '```' >> report.md
                  find content -name "*.jl" -exec sh -c 'echo "\nChecking {}..."; julia --project=pluto-deployment-environment -e "using Pluto; try; Pluto.activate(\"$(dirname {})\"; println(\"✅ Load successful\"); catch e; println(\"❌ Error: \", sprint(showerror, e)); end"' \; >> report.md
                  echo '```' >> report.md
                  
                  # Upload como artifact
                  echo "REPORT_FILE=report.md" >> $GITHUB_ENV

            - name: Upload failure report
              if: failure()
              uses: actions/upload-artifact@v4
              with:
                name: failure-analysis
                path: ${{ env.REPORT_FILE }}
                retention-days: 7

            - name: Show report in summary
              if: failure()
              run: |
                  echo "## 🚨 Failure Analysis" >> $GITHUB_STEP_SUMMARY
                  cat ${{ env.REPORT_FILE }} >> $GITHUB_STEP_SUMMARY
