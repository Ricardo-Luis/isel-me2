name: Export Pluto notebooks & Deploy
permissions:
    contents: write
on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main
    workflow_dispatch:
concurrency:
    group: export
    cancel-in-progress: true

jobs:
    build-and-deploy:
        runs-on: ubuntu-latest
        steps:
            # --- Fase 1: Setup ---
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                fetch-depth: 0

            - name: Install Julia
              uses: julia-actions/setup-julia@v2
              with:
                version: '1.11'
                arch: x64

            # --- Cache Otimizado ---
            - name: ⏱ Cache Julia artifacts and environments
              uses: actions/cache@v4
              with:
                path: |
                    ~/.julia
                    pluto-deployment-environment
                    _cache
                key: ${{ runner.os }}-julia-cache-v4-${{ hashFiles('**/Project.toml', '**/Manifest.toml') }}-${{ github.run_id }}
                restore-keys: |
                    ${{ runner.os }}-julia-cache-v4-${{ hashFiles('**/Project.toml', '**/Manifest.toml') }}

            # --- Fase 2: Configuração Específica ---
            - name: Setup Pluto environment
              run: |
                  mkdir -p pluto-deployment-environment
                  julia -e '
                  using Pkg
                  Pkg.activate("pluto-deployment-environment")
                  Pkg.add("Pluto")
                  Pkg.add(Pkg.PackageSpec(name="PlutoPages", version="0.1.12"))  # Versão estável confirmada
                  Pkg.add("PlutoUI")
                  Pkg.add("HTTP")
                  Pkg.instantiate()
                  Pkg.precompile()
                  '

            - name: Verify installed packages
              run: |
                  julia --project=pluto-deployment-environment -e '
                  using Pkg
                  println("Versões instaladas:")
                  Pkg.status()
                  '

            # --- Fase 3: Validação de Notebooks Corrigida ---
            - name: Find notebooks
              id: find_notebooks
              run: |
                  NOTEBOOKS=$(find content/week0 content/data_science -name "*.jl" | tr '\n' ' ')
                  echo "NOTEBOOKS=${NOTEBOOKS}" >> $GITHUB_OUTPUT
                  echo "Found notebooks: ${NOTEBOOKS}"

            - name: Validate notebooks
              run: |
                  if [ -z "${{ steps.find_notebooks.outputs.NOTEBOOKS }}" ]; then
                      echo "::error::No notebooks found"
                      exit 1
                  fi
                  
                  julia --project=pluto-deployment-environment -e '
                  using Pluto, Pkg
                  
                  notebooks = split(ENV["NOTEBOOKS"])
                  println("Validating ", length(notebooks), " notebooks")
                  
                  for nb in notebooks
                      isempty(nb) && continue
                      println("\n🔍 Validating: ", nb)
                      try
                          Pkg.activate(dirname(nb))
                          nb_obj = Pluto.load_notebook(nb)
                          Pluto.update_run!(nb_obj)
                          println("✅ Valid")
                      catch e
                          println("❌ Error in ", nb)
                          showerror(stdout, e)
                          println("\nStacktrace:")
                          Base.show_backtrace(stdout, catch_backtrace())
                          exit(1)
                      end
                  end
                  '
              env:
                  NOTEBOOKS: ${{ steps.find_notebooks.outputs.NOTEBOOKS }}

            # --- Fase 4: Geração do Site ---
            - name: Generate static site
              run: |
                  ln -sfn content src
                  
                  julia --project=pluto-deployment-environment -e '
                  using PlutoPages
                  
                  try
                      println("Starting generation with PlutoPages v0.1.12")
                      PlutoPages.generate("."; 
                          html_report_path="generation_log.html",
                          notebook_dirs=["week0", "data_science"],
                          fail_on_error=true,
                          pluto_server_url="http://localhost:1234"
                      )
                      
                      if !isdir("_site") || isempty(readdir("_site"))
                          error("No content generated in _site directory")
                      end
                      println("✅ Generation completed successfully")
                  catch e
                      println("❌ Generation failed")
                      showerror(stdout, e)
                      exit(1)
                  end
                  '

            # --- Fase 5: Deploy ---
            - name: Prepare and deploy
              run: |
                  mkdir -p www/Fall23
                  
                  if [ -d "_site" ] && [ "$(ls -A _site)" ]; then
                      mv _site/* www/Fall23/
                      echo "✅ Content moved to www/Fall23"
                  else
                      echo "::error::No content generated in _site"
                      exit 1
                  fi
                  
                  # Página de redirecionamento
                  cat > www/index.html << 'EOF'
                  <!DOCTYPE html>
                  <html>
                  <head>
                      <meta charset="UTF-8">
                      <meta http-equiv="refresh" content="0; url=./Fall23/">
                  </head>
                  <body>
                      <p>Redirecting to <a href="./Fall23/">course content</a>...</p>
                  </body>
                  </html>
                  EOF

            - name: Deploy to GitHub Pages
              if: github.event_name == 'push' && github.ref == 'refs/heads/main'
              uses: actions/deploy-pages@v4
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
                  target-branch: gh-pages
                  publish-dir: ./www

            # --- Fase 6: Relatório de Falhas ---
            - name: Generate debug report
              if: failure()
              run: |
                  echo "# 🐛 Debug Report" > debug.md
                  echo "## Environment" >> debug.md
                  echo '```' >> debug.md
                  julia -e 'using InteractiveUtils; versioninfo()' >> debug.md
                  echo -e "\n## Installed Packages" >> debug.md
                  julia --project=pluto-deployment-environment -e 'using Pkg; Pkg.status()' >> debug.md
                  echo '```' >> debug.md
                  
                  [ -f "generation_log.html" ] && {
                      echo "## Generation Log" >> debug.md
                      echo '```html' >> debug.md
                      grep -A 50 -B 10 "ERROR" generation_log.html | head -100 >> debug.md || echo "No errors found in log" >> debug.md
                      echo '```' >> debug.md
                  }
                  
                  echo "REPORT_FILE=debug.md" >> $GITHUB_ENV

            - name: Upload debug report
              if: failure()
              uses: actions/upload-artifact@v4
              with:
                  name: debug-report
                  path: ${{ env.REPORT_FILE }}
                  retention-days: 7
