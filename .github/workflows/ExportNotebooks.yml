name: Export Pluto notebooks & Deploy
permissions:
    contents: write
on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main
    workflow_dispatch:
concurrency:
    group: export
    cancel-in-progress: true

jobs:
    build-and-deploy:
        runs-on: ubuntu-latest
        steps:
            # --- Fase 1: Setup inicial ---
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                fetch-depth: 0

            - name: Install Julia
              uses: julia-actions/setup-julia@v2
              with:
                version: '1.11'

            # --- Fase 2: Build ---
            - name: Setup environment
              run: |
                  julia --project=pluto-deployment-environment -e '
                    using Pkg
                    Pkg.instantiate()
                    Pkg.precompile()
                  '

            - name: Generate Pluto notebooks
              id: generate
              run: |
                  ln -sfn content src || true
                  
                  julia --project=pluto-deployment-environment -e '
                    using Pkg; Pkg.instantiate()
                    using PlutoPages
                    try
                        PlutoPages.generate("."; 
                            html_report_path="generation_report.html",
                            verbose=true
                        )
                        println("::set-output name=status::success")
                    catch e
                        println("::error::Generation failed")
                        showerror(stdout, e)
                        println("\nStacktrace:")
                        Base.show_backtrace(stdout, catch_backtrace())
                        println("::set-output name=status::failed")
                        exit(1)
                    end
                  '

            # --- Fase 3: Deploy ---
            - name: Build final site
              run: |
                  mkdir -p www
                  if [ -d "_site" ]; then
                      mv _site www/Fall23
                      echo "✅ Site moved to www/Fall23"
                  else
                      mkdir -p www/Fall23
                      echo "<h1>Content coming soon</h1>" > www/Fall23/index.html
                      echo "⚠️ Created placeholder content"
                  fi
                  
                  cat > www/index.html << 'EOF'
                  <!DOCTYPE html>
                  <html>
                  <head>
                      <meta charset="UTF-8">
                      <meta http-equiv="refresh" content="0; url=./Fall23/">
                  </head>
                  <body>
                      <p>Redirecting to <a href="./Fall23/">course content</a>...</p>
                  </body>
                  </html>
                  EOF

            - name: Deploy to GitHub Pages
              if: github.event_name == 'push' && github.ref == 'refs/heads/main'
              uses: actions/deploy-pages@v4

            - name: Upload artifact
              if: github.event_name == 'push' && github.ref == 'refs/heads/main'
              uses: actions/upload-pages-artifact@v3
              with:
                path: www

            # --- Fase 4: Relatório de diagnóstico (só executa se falhar) ---
            - name: Generate diagnostic report
              if: failure() || steps.generate.outputs.status == 'failed'
              run: |
                  # Instala dependências para o relatório
                  sudo apt-get update && sudo apt-get install -y tree || true
                  
                  echo "# 🛠 Diagnostic Report" > diagnostic_report.md
                  echo "**Workflow Status:** FAILED" >> diagnostic_report.md
                  echo "**Date:** $(date)" >> diagnostic_report.md
                  
                  # 1. Estrutura do repositório
                  echo -e "\n## Repository Structure" >> diagnostic_report.md
                  echo '```sh' >> diagnostic_report.md
                  tree -a -L 3 -I ".git|_cache" >> diagnostic_report.md 2>&1 || find . -maxdepth 3 >> diagnostic_report.md
                  echo '```' >> diagnostic_report.md
                  
                  # 2. Arquivos de build
                  echo -e "\n## Build Artifacts" >> diagnostic_report.md
                  if [ -f "generation_report.html" ]; then
                      echo -e "\n### Generation Report" >> diagnostic_report.md
                      echo '```html' >> diagnostic_report.md
                      head -n 100 generation_report.html >> diagnostic_report.md
                      echo '```' >> diagnostic_report.md
                  fi
                  
                  # 3. Conteúdo gerado
                  echo -e "\n### Generated Site Content" >> diagnostic_report.md
                  if [ -d "_site" ]; then
                      echo '```' >> diagnostic_report.md
                      find _site -type f | head -30 >> diagnostic_report.md
                      echo '```' >> diagnostic_report.md
                  else
                      echo "No _site directory found" >> diagnostic_report.md
                  fi
                  
                  # 4. System info
                  echo -e "\n## Environment" >> diagnostic_report.md
                  echo '```' >> diagnostic_report.md
                  julia -e 'using InteractiveUtils; versioninfo()' >> diagnostic_report.md
                  echo -e "\nJulia Packages:" >> diagnostic_report.md
                  julia --project=pluto-deployment-environment -e 'using Pkg; Pkg.status()' >> diagnostic_report.md
                  echo '```' >> diagnostic_report.md
                  
                  # Define output
                  echo "REPORT_FILE=diagnostic_report.md" >> $GITHUB_ENV

            - name: Upload diagnostic report
              if: failure() || steps.generate.outputs.status == 'failed'
              uses: actions/upload-artifact@v4
              with:
                name: diagnostic-report
                path: ${{ env.REPORT_FILE }}
                retention-days: 7

            - name: Show report in summary
              if: failure() || steps.generate.outputs.status == 'failed'
              run: |
                  echo "## 🚨 Diagnostic Information" >> $GITHUB_STEP_SUMMARY
                  cat ${{ env.REPORT_FILE }} >> $GITHUB_STEP_SUMMARY
