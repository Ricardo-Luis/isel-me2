name: Export Pluto notebooks & Deploy
permissions:
    contents: write
on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main
    workflow_dispatch:
concurrency:
    group: export
    cancel-in-progress: true

jobs:
    build-and-deploy:
        runs-on: ubuntu-latest
        steps:
            # --- Fase 1: Setup ---
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                fetch-depth: 0

            - name: Install Julia
              uses: julia-actions/setup-julia@v2
              with:
                version: '1.11'
                arch: x64

            # --- Fase 2: Configura√ß√£o Espec√≠fica ---
            - name: Setup Pluto environment
              run: |
                  # Cria ambiente m√≠nimo
                  mkdir -p pluto-deployment-environment
                  julia -e '
                  using Pkg
                  Pkg.activate("pluto-deployment-environment")
                  Pkg.add(name="PlutoPages", version="0.1.12")
                  Pkg.add("Pluto")
                  Pkg.instantiate()
                  Pkg.precompile()
                  '

            # --- Fase 3: Verifica√ß√£o de Notebooks ---
            - name: Validate notebooks
              run: |
                  julia --project=pluto-deployment-environment -e '
                  using Pluto
                  
                  function check_notebook(path)
                      try
                          println("üîç Checking: ", path)
                          Pluto.activate(dirname(path))
                          Pluto.load_notebook(path) |> Pluto.update_run!
                          println("‚úÖ Valid: ", path)
                          return true
                      catch e
                          println("‚ùå Invalid: ", path)
                          showerror(stdout, e)
                          println("\n")
                          return false
                      end
                  end
                  
                  # Lista expl√≠cita das pastas alvo
                  notebooks = vcat(
                      filter(endswith(".jl"), readdir("content/week0"; join=true)),
                      filter(endswith(".jl"), readdir("content/data_science"; join=true))
                  )
                  
                  if isempty(notebooks)
                      println("::error::No notebooks found in specified folders")
                      exit(1)
                  end
                  
                  results = check_notebook.(notebooks)
                  if !all(results)
                      println("::error::Some notebooks failed validation")
                      exit(1)
                  end
                  '

            # --- Fase 4: Gera√ß√£o do Site ---
            - name: Generate static site
              run: |
                  # Cria estrutura obrigat√≥ria
                  ln -sfn content src
                  mkdir -p _site
                  
                  julia --project=pluto-deployment-environment -e '
                  using PlutoPages
                  
                  try
                      println("‚öôÔ∏è Generating site from:")
                      println("- content/week0/")
                      println("- content/data_science/")
                      
                      PlutoPages.generate(".";
                          html_report_path="generation_log.html",
                          notebook_dirs=["week0", "data_science"],
                          fail_on_error=true
                      )
                      
                      if isempty(readdir("_site"))
                          error("_site directory is empty!")
                      end
                      println("üåê Generated ", length(readdir("_site")), " files")
                      
                  catch e
                      println("::error::Site generation failed")
                      showerror(stdout, e)
                      exit(1)
                  end
                  '

            # --- Fase 5: Deploy ---
            - name: Prepare deployment
              run: |
                  mkdir -p www/Fall23
                  
                  if [ -d "_site" ] && [ "$(ls -A _site)" ]; then
                      mv _site/* www/Fall23/
                      echo "üöÄ Content ready for deployment"
                  else
                      echo "‚ö†Ô∏è No generated content, creating placeholder"
                      echo "<h1>Content coming soon</h1>" > www/Fall23/index.html
                  fi
                  
                  # P√°gina de redirecionamento
                  cat > www/index.html << 'EOF'
                  <!DOCTYPE html>
                  <html>
                  <head>
                      <meta charset="UTF-8">
                      <meta http-equiv="refresh" content="0; url=./Fall23/">
                  </head>
                  <body>
                      <p>Redirecting to <a href="./Fall23/">course content</a>...</p>
                  </body>
                  </html>
                  EOF

            - name: Deploy to GitHub Pages
              if: github.event_name == 'push' && github.ref == 'refs/heads/main'
              uses: actions/deploy-pages@v4

            # --- Fase 6: Relat√≥rio de Falhas ---
            - name: Generate error report
              if: failure()
              run: |
                  echo "# üö® Error Report" > error_report.md
                  
                  # 1. Notebooks problem√°ticos
                  echo "## Problematic Notebooks" >> error_report.md
                  echo '```' >> error_report.md
                  grep -A 2 "‚ùå Invalid" $GITHUB_STEP_LOG >> error_report.md 2>&1 || echo "No notebook errors found" >> error_report.md
                  echo '```' >> error_report.md
                  
                  # 2. Log de gera√ß√£o
                  echo "## Generation Log" >> error_report.md
                  echo '```' >> error_report.md
                  tail -n 50 generation_log.html 2>/dev/null || echo "No generation log found" >> error_report.md
                  echo '```' >> error_report.md
                  
                  # 3. Ambiente
                  echo "## Environment Info" >> error_report.md
                  echo '```' >> error_report.md
                  julia --project=pluto-deployment-environment -e '
                      using Pkg
                      println("Julia: ", VERSION)
                      println("Pluto: ", Pkg.dependencies()[findfirst(x->x.name=="Pluto", Pkg.dependencies())].version)
                      println("PlutoPages: ", Pkg.dependencies()[findfirst(x->x.name=="PlutoPages", Pkg.dependencies())].version)
                  ' >> error_report.md
                  echo '```' >> error_report.md
                  
                  echo "REPORT_FILE=error_report.md" >> $GITHUB_ENV

            - name: Upload error report
              if: failure()
              uses: actions/upload-artifact@v4
              with:
                name: error-report
                path: ${{ env.REPORT_FILE }}
                retention-days: 7
